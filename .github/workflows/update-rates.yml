name: Update FX rates (daily)

on:
  schedule:
    - cron: "12 2 * * *"     # daily at 02:12 UTC
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: fx-rates-refresh
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch/merge ALL currencies from providers and write rates.json
        shell: bash
        run: |
          set -euo pipefail
          DATE="$(date -u +%F)"
          TMP_DIR="$(mktemp -d)"
          OUT="$TMP_DIR/out.json"
          echo '{}' > "$OUT"   # we'll build a flat { "USD->XXX": rate } map

          fetch_and_merge () {
            local url="$1" tag="$2"
            local f="$TMP_DIR/${tag}.json" r="$TMP_DIR/${tag}.rates.json"
            echo "Trying $tag -> $url"
            if curl -fsSL "$url" -o "$f" && jq -e '.rates and (.rates|type=="object")' "$f" >/dev/null; then
              # extract the raw .rates object with no filtering
              jq '.rates' "$f" > "$r"
              # merge (prefer existing keys; fill missing ones)
              jq -s '.[0] * .[1]' "$OUT" "$r" > "$TMP_DIR/merged.json" && mv "$TMP_DIR/merged.json" "$OUT"
              echo "$tag merged."
              return 0
            fi
            return 1
          }

          # Providers (any that succeed will enrich the map)
          fetch_and_merge "https://api.exchangerate.host/latest?base=USD" "exchangerate.host" || true
          fetch_and_merge "https://api.frankfurter.app/latest?from=USD" "frankfurter.app"   || true
          fetch_and_merge "https://open.er-api.com/v6/latest/USD"       "open.er-api.com"   || true

          # Backfill USD-pegged currencies if provider omitted them
          jq '
            .AED = (.AED // 3.6725) |
            .SAR = (.SAR // 3.75)
          ' "$OUT" > "$TMP_DIR/pegged.json" && mv "$TMP_DIR/pegged.json" "$OUT"

          # Final JSON: { "asOf": "...", "rates": { ... } }
          jq --arg date "$DATE" '{asOf:$date, rates:.}' "$OUT" > rates.json
          echo "Wrote rates.json:"
          head -c 500 rates.json || true; echo

      - name: Commit changes if any
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: refresh FX rates"
          file_pattern: rates.json
